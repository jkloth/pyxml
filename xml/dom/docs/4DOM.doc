<article xmlns="http://docbook.org/docbook/xml/4.0/namespace">
<artheader>
<title>4DOM: Standards-Based XML and HTML manipulation using Python</title><author>Fourthought, Inc.</author>
</artheader>

<sect1><title>Overview</title>

<para>4DOM is a <link linkend="http://www.python.org">Python</link> implementation of the <link linkend="http://www.w3.org/TR/REC-DOM-Level-2/">document object model (DOM)</link>, a standard interface for manipulating XML and HTML documents developed by the World-Wide Web Consortium.  4DOM implements DOM Level 2 Core, Level 2 HTML and Document Traversal, and a few extensions.</para>

<para>
4DOM is designed to allow developers rapidly design applications that read, write or manipulate HTML and XML.
</para>

<para>
The current version is 0.10.1. See the <link linkend="ftp://FourThought.com/pub/4Suite/4DOM/ChangeLog">ChangeLog</link> for notes on the current version.
</para>

</sect1>

<sect1><title>Installation</title>

Prerequisites:

<orderedlist>
<listitem><link linkend="http://www.python.org">Python</link>.  4DOM was developed and tested on Python 1.5.2.</listitem>
<listitem><link linkend="http://www.python.org/sigs/xml-sig/">the Python XML package</link></listitem>
</orderedlist>

<para>Download <link linkend="ftp://FourThought.com/pub/4Suite/">4DOM</link> and unpack the archive in a suitable location in your PYTHONPATH.  Read the README and you're ready to go.
</para>

</sect1>

<sect1><title>Directory Structure</title>

<orderedlist>
<listitem>xml/dom: Core DOM components (including XML classes)</listitem>
<listitem>xml/dom/html: HTML components</listitem>
<listitem>xml/dom/ext: Extensions and proprietary components</listitem>
<listitem>xml/dom/docs: (currently minimal) documentation</listitem>
<listitem>xml/dom/demo: small scripts demonstrating some uses of 4DOM.  See the README in this directory</listitem>
</orderedlist>

</sect1>


<sect1><title>Implementation Notes</title>

<sect2><title>Accessors/Mutators for Attributes</title>
<para>
Following discussion on the Python XML SIG mailing list, 4DOM provides two ways to access DOM interface attributes.  As an example, the DOM IDL definition for the Node interface contains <computeroutput>readonly attribute DOMString childNodes</computeroutput>.  This can be accessed as a simple Python attribute: <computeroutput>node.childNodes</computeroutput>, or as a method call using the Python/CORBA mapping for attributes: <computeroutput>node._get_childNodes()</computeroutput> [if childNodes were a read/write attribute, there would also be a <computeroutput>node._set_childNodes()]</computeroutput>.  There is a slight speed advantage to using the latter convention.
</para>
</sect2>


<sect2><title>Document._get_ownerDocument()</title>
<para>Document._get_ownerDocument() returns a pointer to itself.
</para>
</sect2>

<sect2><title>Creating HTML Element Nodes</title>
<para>HTMLDocument.CreateElement() overrides the Document.CreateElement()
method, looking up the specified tag and returning an instance of the appropriate HTML node.  For instance
<computeroutput>
#doc is an HTMLDocument
table_elem = doc.CreateElement("TABLE")
#table_elem is an instance of HTMLTableElement
</computeroutput>
</para>
</sect2>


</sect1>


<sect1><title>Deviations from the DOM Specification</title>

<orderedlist>
<listitem>4DOM does not implement DOMString. Instead, the interfaces use a plain Python string instead. Note that Python strings do not have length limitations, and unicode is still in beta.
</listitem>
<listitem>The DOM Spec section on the removeAttribute method of the
Element interface has some rules for Attribute removal with respect to
default values. 4DOM only follows these rules if you remove attributes
using the removeAttribute method, and the default attribute will not be
properly set if you use removeNamedItem to remove an attribute from the
NamedNodeMap returned by Element.getAttributes.</listitem>
<listitem>The DOM ambiguously specifies that if the given name in the removeNamedItem
method of NamedNodeMap not found, None is returned <emph>and</emph> an exception
is raised. This isn't possible in most languages. 4DOM chooses
to return None.</listitem>
<listitem>4DOM does not implement HTMLElement features strictly for browser environment, for example, blur and focus properties of HTMLSelectElement.</listitem>
<listitem>Some methods of the DOM spec for HTML do not allow for errors
associated with missing nodes. So, for example, HTMLDocument::setTitle()
does not allow for the return of an error if the HTMLDocument does not
have an HTMLHeadElement child. 4DOM, in these cases, will automatically
add in needed elements in order to strictly follow the DOM interface spec.  The methods for which 4DOM provides automatic document completion are
<computeroutput>HTMLDocument::getDocumentElement()</computeroutput>
<computeroutput>HTMLDocument::setTitle()</computeroutput>
<computeroutput>HTMLDocument::getBody()</computeroutput>
<computeroutput>HTMLDocument::setBody()</computeroutput>
<computeroutput>HTMLTableElement::insertRow()</computeroutput>
<computeroutput>HTMLTableRowElement::insertCell()</computeroutput></listitem>
<listitem>See docs/Extensions.html for documentation of proprietary extensions
and helper functions provided by 4DOM.</listitem>
</orderedlist>

</sect1>


<sect1><title>More Information</title>

<para>
For release notes and news, see <link linkend="http://FourThought.com/4Suite/4DOM">http://FourThought.com/4Suite/4DOM</link>
</para>

<para>
The 4Suite users and support mailing list can be subscribed to, and archives viewed at <link linkend='http://lists.fourthought.com/mailman/listinfo/4suite'>http://lists.fourthought.com/mailman/listinfo/4suite</link>
</para>

<para>4Suite developers monitor the above list, and prefer for support to come thereby, but you can also contact them directly at <link linkend="mailto:support@4suite.com">support@4suite.com</link> with questions and comments. You might also post messages to or check the archives of the Python <link linkend="http://www.python.org/sigs/xml-sig/">xml-sig</link> mailing list.
</para>

</sect1>

</article>
